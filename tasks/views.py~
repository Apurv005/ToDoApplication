from rest_framework import status, viewsets
from rest_framework.exceptions import PermissionDenied
from rest_framework.response import Response
from rest_framework.decorators import action, api_view
from rest_framework.permissions import IsAuthenticated
from .models import Task
from .serializers import TaskSerializer
from rest_framework.generics import UpdateAPIView




class TaskViewSet(viewsets.ModelViewSet):
    queryset = Task.objects.all()
    serializer_class = TaskSerializer

    permission_classes = [IsAuthenticated]  # Ensure the user is authenticated


    def get_queryset(self):
        return Task.objects.filter(user=self.request.user)  # Show only logged-in user's tasks

    def perform_create(self, serializer):
        serializer.save(user=self.request.user)  # Save task with logged-in user

    def perform_destroy(self, instance):
        # Additional logic before deletion (e.g., check if the task belongs to the authenticated user)
        if instance.user != self.request.user:
            raise PermissionDenied("You cannot delete this task.")
        instance.delete()

    def perform_update(self, serializer):

        if 'completed' in serializer.validated_data:
            print(serializer.validated_data)
            # Toggle the completed status when the task is updated
            serializer.instance.completed = not serializer.validated_data['completed']
        serializer.save()




class TaskUpdateView(UpdateAPIView):
    queryset = Task.objects.all()
    serializer_class = TaskSerializer
    permission_classes = [IsAuthenticated]

    def get_object(self):
        # Ensure the task belongs to the currently logged-in user
        task = super().get_object()
        if task.user != self.request.user:
            raise PermissionDenied("You do not have permission to edit this task")
        return task